name: Deploy Storefront

on:
  push:
    branches:
      - main # Or your primary deployment branch for storefront
    paths: # Only run if files in these paths change - these paths are relative to the repo root (which is 212storefront/)
      - '**' # Trigger on any change within the 212storefront directory
      - '.github/workflows/deploy-storefront.yml' # Corrected path to this workflow file
  workflow_dispatch: # Allows manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # This checks out the repo where the workflow file resides

      - name: List files in 212storefront directory # DEBUGGING STEP
        # This will now list the root of your repository (which is the content of 212storefront)
        run: |
          echo "Listing contents of $GITHUB_WORKSPACE:"
          ls -la $GITHUB_WORKSPACE

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Specify the Node.js version your project uses
          cache: 'npm' # Optional: Caches npm dependencies
          cache-dependency-path: 'package-lock.json' # Path relative to repo root (which is $GITHUB_WORKSPACE)

      - name: Install dependencies
        # No working-directory needed as we are already in the project root
        run: npm install

      - name: Build storefront
        # No working-directory needed
        run: npm run build

      - name: Transfer built files to EC2
        uses: appleboy/scp-action@v0.1.7 # Use SCP action to copy files
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ".next/,public/,package.json,package-lock.json" # Paths relative to $GITHUB_WORKSPACE
          target: "/var/www/212manager-app/212storefront" # Destination directory on EC2
          # strip_components is no longer needed as source paths are direct

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0 # Or latest version
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          # The script now only handles server-side commands after files are copied
          script: |
            set -e # Exit on error
            echo "Deploying storefront to /var/www/212manager-app/212storefront..."
            cd /var/www/212manager-app/212storefront
            
            # Files are already copied by the SCP action
            echo "Files transferred to $(pwd)"
            
            echo "Installing production dependencies on EC2..."
            npm install --omit=dev # Or npm install --production
            
            echo "Creating .env file from secret..."
            echo "${{ secrets.STOREFRONT_ENV }}" > .env
            
            echo "Restarting PM2 process for 212storefront..."
            pm2 restart 212storefront
            pm2 save
            echo "Storefront deployment complete."
            pm2 list
